# -*- coding: utf-8 -*-
"""Classification of Email is Spam or Not

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vyTiptVtPygnybl23Px_E97XlKa1yM-4
"""

import pandas as pd
import string
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Download NLTK resources if not already available
nltk.download('stopwords')
nltk.download('punkt')

# Load the dataset
df = pd.read_csv('/content/spam_dataset.csv')

# Display the first few records of the dataset
print("Initial data preview:")
print(df.head())

# Handle missing values by dropping rows with NaN in 'message_content' or 'is_spam'
df.dropna(subset=['message_content', 'is_spam'], inplace=True)
df['message_content'] = df['message_content'].astype(str)  # Ensure the message content is treated as string

# Define text preprocessing function
def preprocess_text(text):
    """
    Preprocess the text data by lowering case, removing punctuation, tokenizing,
    removing stopwords, and stemming.
    """
    text = text.lower()  # Convert to lowercase
    text = text.translate(str.maketrans('', '', string.punctuation))  # Remove punctuation
    tokens = word_tokenize(text)  # Tokenize text
    tokens = [word for word in tokens if word not in stopwords.words('english')]  # Remove stopwords
    ps = PorterStemmer()
    tokens = [ps.stem(word) for word in tokens]  # Apply stemming
    return ' '.join(tokens)

# Apply preprocessing to the 'message_content' column
df['processed_text'] = df['message_content'].apply(preprocess_text)

# Separate features and target variable
X = df['processed_text']
y = df['is_spam']

# Convert text data to numerical format using TF-IDF Vectorizer
vectorizer = TfidfVectorizer()
X_vectorized = vectorizer.fit_transform(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_vectorized, y, test_size=0.2, random_state=42)

# Ensure the split data is not empty
if X_train.shape[0] == 0 or X_test.shape[0] == 0:
    raise ValueError("Training or test set is empty. Check the dataset and split parameters.")

# Initialize and train the Naive Bayes model
model = MultinomialNB()
try:
    model.fit(X_train, y_train)
except ValueError as e:
    print(f"An error occurred during model training: {e}")
    raise

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model performance
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f'\nModel Accuracy: {accuracy:.2f}')
print('\nClassification Report:')
print(report)

# Function to predict if an email is spam or not
def predict_email(text):
    """
    Predicts whether the provided email content is spam or not.
    """
    processed_text = preprocess_text(text)  # Preprocess the input text
    text_vectorized = vectorizer.transform([processed_text])  # Convert to numerical format
    prediction = model.predict(text_vectorized)  # Predict using the model
    return 'spam' if prediction[0] == 1 else 'not spam'

# Test the prediction function with a sample email
sample_email = "Congratulations! You've won a $1000 gift card."
print(f'\nThe sample email is classified as: {predict_email(sample_email)}')